{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ROWS = 6\
COLS = 7\
\
print(player_moves)\
\
class Board():\
    def __init__(self):\
        self.board = [[' ' for _ in range(COLS)] for _ in range(ROWS)]\
        self.turns = 0\
        self.last_move = [-1,-1] \
        \
        \
    def print_board(self):\
        print("\\n")\
        for c in range(COLS):\
            print(f"(\{c\}) ", end="")\
        print("\\n")\
        \
        for r in range(ROWS):\
            print("|",end="")\
            for c in range(COLS):\
                print(f" \{self.board[r][c]\} |", end = "")\
            print("\\n")\
            \
        print(f"\{'-------------------------------------------------\\n")\
        \
    def playing(self):\
        players = ['1','2']\
        return players[self.turns % 2]\
        \
    def turn(self,col):\
        for r in range(ROWS-1,-1,-1):\
            if self.board[r][col] == ' ':\
                self.board[r][col] = self.playing()\
                self.last_move = [r,col]\
                self.turns += 1\
                return True\
        return False\
    \
    def limits(self, r, c):\
        return (r >= 0 and r < ROWS and c >= 0 and c < COLS)\
    \
    def winner(self):\
        last_row = self.last_move[0]\
        last_col = self.last_move[1]\
        last_player = self.board[last_row][last_col]\
        \
        direction = [\
            [[-1,0],0, True],\
            [[1,0],0, True],\
            [[0,-1],0, True],\
            [[0,1],0, True],\
            [[-1,1],0, True],\
            [[1,-1],0, True],   \
            [[-1,-1],0, True],\
            [[1,1],0, True],\
        ]\
        \
        for i in range(4):\
            for d in direction:\
                r = last_row + (d[0][0]*(i+1))\
                c = last_col + (d[0][1]*(i+1))\
                \
                if d[2] and self.limits(r,c) and self.board[r][c] == last_player:\
                    d[1] += 1\
                else:\
                    d[2] = False\
        \
        for j in range(0,7,2):\
            if (direction[j][1]+direction[j+1][1] >= 3):\
                self.print_board()\
                print(f"\{last_player\} is the winner")\
                return last_player\
        return False\
    \
        \
    \
    \
def play():\
    game = Board()\
    game.print_board()\
    game_over = False\
    while not game_over:\
        for i in player_moves:\
            user_move = i\
            game.turn(user_move)\
            game.print_board()\
            # game_over = game.winner()\
            \
            #Smart move\
            \
            if game.winner():\
                break\
        \
        if not any(' ' in x for x in game.board) and not game.winner:\
            print("It is a draw!!!")\
            return \
        \
        print("\\nGame Over!")\
        break\
        \
\
\
play()}